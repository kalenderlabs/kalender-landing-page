Write-Host "üîç Verificando pasta public..." -ForegroundColor Cyan
Write-Host "üìÅ Diret√≥rio atual: $(Get-Location)" -ForegroundColor Gray

# Verificar se estamos na raiz do projeto
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå N√£o encontrou package.json. Execute este script na raiz do projeto Next.js" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Encontrou package.json" -ForegroundColor Green

# Verificar pasta public
if (-not (Test-Path "public")) {
    Write-Host "‚ùå Pasta public n√£o existe!" -ForegroundColor Red
    Write-Host "üí° Criando pasta public..." -ForegroundColor Yellow
    New-Item -ItemType Directory -Name "public"
    Write-Host "‚úÖ Pasta public criada" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Pasta public existe" -ForegroundColor Green
}

# Listar conte√∫do da pasta public
Write-Host ""
Write-Host "üìã Conte√∫do da pasta public:" -ForegroundColor Cyan
Get-ChildItem "public" -Force | Format-Table Name, Length, LastWriteTime

# Verificar logo espec√≠fico
if (Test-Path "public/kalender-logo.png") {
    Write-Host "‚úÖ kalender-logo.png encontrado!" -ForegroundColor Green
    Get-Item "public/kalender-logo.png" | Format-List Name, Length, LastWriteTime
} else {
    Write-Host "‚ùå kalender-logo.png N√ÉO encontrado!" -ForegroundColor Red
    
    # Procurar arquivos similares
    Write-Host "üîç Procurando arquivos similares..." -ForegroundColor Yellow
    $similarFiles = Get-ChildItem "public" -Recurse | Where-Object { $_.Name -like "*logo*" -or $_.Name -like "*kalender*" }
    if ($similarFiles) {
        $similarFiles | Format-Table Name, Directory
    } else {
        Write-Host "Nenhum arquivo similar encontrado" -ForegroundColor Gray
    }
}

# Verificar Git
Write-Host ""
Write-Host "üîÑ Verificando Git..." -ForegroundColor Cyan
try {
    git rev-parse --git-dir 2>$null
    Write-Host "‚úÖ √â um reposit√≥rio Git" -ForegroundColor Green
    
    Write-Host "üìÅ Arquivos da pasta public no Git:" -ForegroundColor Cyan
    $gitFiles = git ls-files public/
    if ($gitFiles) {
        $gitFiles
    } else {
        Write-Host "Nenhum arquivo da pasta public no Git" -ForegroundColor Yellow
    }
    
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Arquivos n√£o rastreados na pasta public:" -ForegroundColor Yellow
    $untrackedFiles = git ls-files --others --exclude-standard public/
    if ($untrackedFiles) {
        $untrackedFiles
    } else {
        Write-Host "Nenhum arquivo n√£o rastreado" -ForegroundColor Gray
    }
    
} catch {
    Write-Host "‚ö†Ô∏è  N√£o √© um reposit√≥rio Git" -ForegroundColor Yellow
}

# Verificar .gitignore
Write-Host ""
Write-Host "üîç Verificando .gitignore..." -ForegroundColor Cyan
if (Test-Path ".gitignore") {
    $gitignoreContent = Get-Content ".gitignore"
    $problematicLines = $gitignoreContent | Where-Object { $_ -match "public/" -or $_ -match "/public" }
    
    if ($problematicLines) {
        Write-Host "‚ùå PROBLEMA: .gitignore est√° ignorando a pasta public!" -ForegroundColor Red
        Write-Host "Linhas problem√°ticas:" -ForegroundColor Red
        $problematicLines
    } else {
        Write-Host "‚úÖ .gitignore n√£o est√° ignorando a pasta public" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è  Arquivo .gitignore n√£o encontrado" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Se o logo n√£o existe, adicione o arquivo kalender-logo.png na pasta public/" -ForegroundColor White
Write-Host "2. Execute: git add public/" -ForegroundColor White
Write-Host "3. Execute: git commit -m 'Add kalender logo'" -ForegroundColor White
Write-Host "4. Execute: git push" -ForegroundColor White
Write-Host "5. Fa√ßa deploy no Vercel" -ForegroundColor White
